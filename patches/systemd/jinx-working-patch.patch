diff -urN --no-dereference systemd-clean/src/basic/build-path.c systemd-workdir/src/basic/build-path.c
--- systemd-clean/src/basic/build-path.c
+++ systemd-workdir/src/basic/build-path.c
@@ -37,7 +37,7 @@
                          * using the bias calculated earlier. */
                         if (d->d_un.d_val != 0)
                                 strtab = (const char *) ((uintptr_t) d->d_un.d_val
-#if defined(__mips__) || defined(__riscv)
+#if defined(__mips__) || defined(__riscv) || defined(__mlibc__)
                                          + bias
 #endif
                                 );
diff -urN --no-dereference systemd-clean/src/basic/missing_syscall.h systemd-workdir/src/basic/missing_syscall.h
--- systemd-clean/src/basic/missing_syscall.h
+++ systemd-workdir/src/basic/missing_syscall.h
@@ -11,7 +11,9 @@
 #include <linux/time_types.h>
 #endif
 #include <signal.h>
+#ifdef __linux__
 #include <sys/syscall.h>
+#endif
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <unistd.h>
@@ -35,7 +37,7 @@
 
 #if !HAVE_FCHMODAT2
 static inline int missing_fchmodat2(int dirfd, const char *path, mode_t mode, int flags) {
-#  ifdef __NR_fchmodat2
+#  if defined(__NR_fchmodat2) && !defined(__menix__)
         return syscall(__NR_fchmodat2, dirfd, path, mode, flags);
 #  else
         errno = ENOSYS;
@@ -50,7 +52,12 @@
 
 #if !HAVE_PIVOT_ROOT
 static inline int missing_pivot_root(const char *new_root, const char *put_old) {
+#ifndef __menix__
         return syscall(__NR_pivot_root, new_root, put_old);
+#else
+        errno = ENOSYS;
+        return 0;
+#endif
 }
 
 #  define pivot_root missing_pivot_root
@@ -60,7 +67,12 @@
 
 #if !HAVE_IOPRIO_GET
 static inline int missing_ioprio_get(int which, int who) {
+#ifndef __menix__
         return syscall(__NR_ioprio_get, which, who);
+#else
+        errno = ENOSYS;
+        return 0;
+#endif
 }
 
 #  define ioprio_get missing_ioprio_get
@@ -70,7 +82,12 @@
 
 #if !HAVE_IOPRIO_SET
 static inline int missing_ioprio_set(int which, int who, int ioprio) {
+#ifndef __menix__
         return syscall(__NR_ioprio_set, which, who, ioprio);
+#else
+        errno = ENOSYS;
+        return 0;
+#endif
 }
 
 #  define ioprio_set missing_ioprio_set
@@ -80,8 +97,10 @@
 
 #if !HAVE_MEMFD_CREATE
 static inline int missing_memfd_create(const char *name, unsigned int flags) {
-#  ifdef __NR_memfd_create
+#  if defined __NR_memfd_create && !defined(__menix__)
         return syscall(__NR_memfd_create, name, flags);
+#elif defined(__mlibc__)
+        return memfd_create(name, flags);
 #  else
         errno = ENOSYS;
         return -1;
@@ -96,8 +115,10 @@
 #if !HAVE_GETRANDOM
 /* glibc says getrandom() returns ssize_t */
 static inline ssize_t missing_getrandom(void *buffer, size_t count, unsigned flags) {
-#  ifdef __NR_getrandom
+#  ifdef __NR_getrandom && !defined(__mlibc__)
         return syscall(__NR_getrandom, buffer, count, flags);
+#elif defined(__mlibc__)
+        return getrandom(buffer, count, flags);
 #  else
         errno = ENOSYS;
         return -1;
@@ -112,8 +133,10 @@
 /* The syscall has been defined since forever, but the glibc wrapper was missing. */
 #if !HAVE_GETTID
 static inline pid_t missing_gettid(void) {
-#  if defined __NR_gettid && __NR_gettid >= 0
+#  if defined __NR_gettid && __NR_gettid >= 0 && !defined(__mlibc__)
         return (pid_t) syscall(__NR_gettid);
+#elif defined(__mlibc__)
+        return gettid();
 #  else
 #    error "__NR_gettid not defined"
 #  endif
@@ -161,7 +184,9 @@
 /* ======================================================================= */
 
 static inline pid_t raw_getpid(void) {
-#if defined(__alpha__)
+#if defined(__mlibc__)
+        return getpid();
+#elif defined(__alpha__)
         return (pid_t) syscall(__NR_getxpid);
 #else
         return (pid_t) syscall(__NR_getpid);
@@ -172,7 +197,7 @@
 
 #if !HAVE_RENAMEAT2
 static inline int missing_renameat2(int oldfd, const char *oldname, int newfd, const char *newname, unsigned flags) {
-#  ifdef __NR_renameat2
+#  if defined(__NR_renameat2) && !defined(__menix__)
         return syscall(__NR_renameat2, oldfd, oldname, newfd, newname, flags);
 #  else
         errno = ENOSYS;
@@ -242,7 +267,7 @@
                                               int fd_out, loff_t *off_out,
                                               size_t len,
                                               unsigned int flags) {
-#  ifdef __NR_copy_file_range
+#  if defined(__NR_copy_file_range) && !defined(__menix__)
         return syscall(__NR_copy_file_range, fd_in, off_in, fd_out, off_out, len, flags);
 #  else
         errno = ENOSYS;
@@ -259,7 +284,7 @@
 union bpf_attr;
 
 static inline int missing_bpf(int cmd, union bpf_attr *attr, size_t size) {
-#ifdef __NR_bpf
+#if defined(__NR_bpf) && !defined(__menix__)
         return (int) syscall(__NR_bpf, cmd, attr, size);
 #else
         errno = ENOSYS;
@@ -369,6 +394,9 @@
 static inline int missing_rt_sigqueueinfo(pid_t tgid, int sig, siginfo_t *info) {
 #  if defined __NR_rt_sigqueueinfo && __NR_rt_sigqueueinfo >= 0
         return syscall(__NR_rt_sigqueueinfo, tgid, sig, info);
+#elif defined(__mlibc__)
+        errno = ENOSYS;
+        return 0;
 #  else
 #    error "__NR_rt_sigqueueinfo not defined"
 #  endif
@@ -383,6 +411,9 @@
 static inline int missing_rt_tgsigqueueinfo(pid_t tgid, pid_t tid, int sig, siginfo_t *info) {
 #  if defined __NR_rt_tgsigqueueinfo && __NR_rt_tgsigqueueinfo >= 0
         return syscall(__NR_rt_tgsigqueueinfo, tgid, tid, sig, info);
+#elif defined(__mlibc__)
+        errno = ENOSYS;
+        return 0;
 #  else
 #    error "__NR_rt_tgsigqueueinfo not defined"
 #  endif
@@ -414,7 +445,7 @@
 
 #if !HAVE_CLOSE_RANGE
 static inline int missing_close_range(unsigned first_fd, unsigned end_fd, unsigned flags) {
-#  ifdef __NR_close_range
+#  if defined(__NR_close_range) && !defined(__menix__)
         /* Kernel-side the syscall expects fds as unsigned integers (just like close() actually), while
          * userspace exclusively uses signed integers for fds. glibc chose to expose it 1:1 however, hence we
          * do so here too, even if we end up passing signed fds to it most of the time. */
@@ -505,7 +536,7 @@
                 struct mount_attr *attr,
                 size_t size) {
 
-#  if defined __NR_mount_setattr && __NR_mount_setattr >= 0
+#  if defined __NR_mount_setattr && __NR_mount_setattr >= 0 && !defined(__menix__)
         return syscall(__NR_mount_setattr, dfd, path, flags, attr, size);
 #  else
         errno = ENOSYS;
@@ -533,7 +564,7 @@
                 const char *filename,
                 unsigned flags) {
 
-#  if defined __NR_open_tree && __NR_open_tree >= 0
+#  if defined __NR_open_tree && __NR_open_tree >= 0 && !defined(__menix__)
         return syscall(__NR_open_tree, dfd, filename, flags);
 #  else
         errno = ENOSYS;
@@ -567,7 +598,7 @@
                 const char *to_pathname,
                 unsigned flags) {
 
-#  if defined __NR_move_mount && __NR_move_mount >= 0
+#  if defined __NR_move_mount && __NR_move_mount >= 0 && !defined(__menix__)
         return syscall(__NR_move_mount, from_dfd, from_pathname, to_dfd, to_pathname, flags);
 #  else
         errno = ENOSYS;
@@ -587,7 +618,7 @@
 #endif
 
 static inline int missing_fsopen(const char *fsname, unsigned flags) {
-#  if defined __NR_fsopen && __NR_fsopen >= 0
+#  if defined __NR_fsopen && __NR_fsopen >= 0 && !defined(__menix__)
         return syscall(__NR_fsopen, fsname, flags);
 #  else
         errno = ENOSYS;
@@ -619,7 +650,7 @@
 #endif
 
 static inline int missing_fsconfig(int fd, unsigned cmd, const char *key, const void *value, int aux) {
-#  if defined __NR_fsconfig && __NR_fsconfig >= 0
+#  if defined __NR_fsconfig && __NR_fsconfig >= 0 && !defined(__menix__)
         return syscall(__NR_fsconfig, fd, cmd, key, value, aux);
 #  else
         errno = ENOSYS;
@@ -639,7 +670,7 @@
 #endif
 
 static inline int missing_fsmount(int fd, unsigned flags, unsigned ms_flags) {
-#  if defined __NR_fsmount && __NR_fsmount >= 0
+#  if defined __NR_fsmount && __NR_fsmount >= 0 && !defined(__menix__)
         return syscall(__NR_fsmount, fd, flags, ms_flags);
 #  else
         errno = ENOSYS;
@@ -655,7 +686,7 @@
 #if !HAVE_GETDENTS64
 
 static inline ssize_t missing_getdents64(int fd, void *buffer, size_t length) {
-#  if defined __NR_getdents64 && __NR_getdents64 >= 0
+#  if defined __NR_getdents64 && __NR_getdents64 >= 0 && !defined(__menix__)
         return syscall(__NR_getdents64, fd, buffer, length);
 #  else
         errno = ENOSYS;
@@ -671,7 +702,7 @@
 #if !HAVE_SCHED_SETATTR
 
 static inline ssize_t missing_sched_setattr(pid_t pid, struct sched_attr *attr, unsigned int flags) {
-#  if defined __NR_sched_setattr
+#  if defined __NR_sched_setattr && !defined(__menix__)
         return syscall(__NR_sched_setattr, pid, attr, flags);
 #  else
         errno = ENOSYS;
diff -urN --no-dereference systemd-clean/src/basic/raw-clone.h systemd-workdir/src/basic/raw-clone.h
--- systemd-clean/src/basic/raw-clone.h
+++ systemd-workdir/src/basic/raw-clone.h
@@ -7,7 +7,7 @@
 
 #include <errno.h>
 #include <sched.h>
-#include <sys/syscall.h>
+// #include <sys/syscall.h>
 
 #include "log.h"
 #include "macro.h"
@@ -74,6 +74,8 @@
                 } else
                         ret = in_child ? 0 : child_pid;
         }
+#elif defined(__mlibc__)
+        ret = fork();
 #else
         ret = (pid_t) syscall(__NR_clone, flags, NULL);
 #endif
diff -urN --no-dereference systemd-clean/src/basic/raw-reboot.h systemd-workdir/src/basic/raw-reboot.h
--- systemd-clean/src/basic/raw-reboot.h
+++ systemd-workdir/src/basic/raw-reboot.h
@@ -3,12 +3,18 @@
 
 #include <linux/reboot.h>
 #include <sys/reboot.h>
+#ifndef __mlibc__
 #include <sys/syscall.h>
+#endif
 
 /* glibc defines the reboot() API call, which is a wrapper around the system call of the same name, but without the
  * extra "arg" parameter. Since we need that parameter for some calls, let's add a "raw" wrapper that is defined the
  * same way, except it takes the additional argument. */
 
 static inline int raw_reboot(int cmd, const void *arg) {
+#ifndef __mlibc__
         return (int) syscall(SYS_reboot, LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, cmd, arg);
+#else
+        return reboot(cmd);
+#endif
 }
diff -urN --no-dereference systemd-clean/src/core/exec-invoke.c systemd-workdir/src/core/exec-invoke.c
--- systemd-clean/src/core/exec-invoke.c
+++ systemd-workdir/src/core/exec-invoke.c
@@ -5,6 +5,7 @@
 #include <sys/ioctl.h>
 #include <sys/mount.h>
 #include <sys/prctl.h>
+#include <sys/file.h>
 
 #if HAVE_PAM
 #include <security/pam_appl.h>
diff -urN --no-dereference systemd-clean/src/core/mount.c systemd-workdir/src/core/mount.c
--- systemd-clean/src/core/mount.c
+++ systemd-workdir/src/core/mount.c
@@ -5,6 +5,8 @@
 #include <stdio.h>
 #include <sys/epoll.h>
 
+#include <libmount.h>
+
 #include "sd-messages.h"
 
 #include "alloc-util.h"
diff -urN --no-dereference systemd-clean/src/firstboot/firstboot.c systemd-workdir/src/firstboot/firstboot.c
--- systemd-clean/src/firstboot/firstboot.c
+++ systemd-workdir/src/firstboot/firstboot.c
@@ -1,5 +1,6 @@
 /* SPDX-License-Identifier: LGPL-2.1-or-later */
 
+#include <sys/file.h>
 #include <fcntl.h>
 #include <getopt.h>
 #include <linux/loop.h>
diff -urN --no-dereference systemd-clean/src/libsystemd/sd-event/sd-event.c systemd-workdir/src/libsystemd/sd-event/sd-event.c
--- systemd-clean/src/libsystemd/sd-event/sd-event.c
+++ systemd-workdir/src/libsystemd/sd-event/sd-event.c
@@ -1891,7 +1891,8 @@
 
         usec_t before_timestamp = now(CLOCK_MONOTONIC);
         hashmap_trim_pools();
-        r = malloc_trim(0);
+        // r = malloc_trim(0);
+        r = 0;
         usec_t after_timestamp = now(CLOCK_MONOTONIC);
 
         if (r > 0)
diff -urN --no-dereference systemd-clean/src/mountfsd/mountwork.c systemd-workdir/src/mountfsd/mountwork.c
--- systemd-clean/src/mountfsd/mountwork.c
+++ systemd-workdir/src/mountfsd/mountwork.c
@@ -23,6 +23,8 @@
 #include "varlink.h"
 #include "varlink-io.systemd.MountFileSystem.h"
 
+#include <sys/file.h>
+
 #define ITERATIONS_MAX 64U
 #define RUNTIME_MAX_USEC (5 * USEC_PER_MINUTE)
 #define PRESSURE_SLEEP_TIME_USEC (50 * USEC_PER_MSEC)
diff -urN --no-dereference systemd-clean/src/nsresourced/userns-registry.c systemd-workdir/src/nsresourced/userns-registry.c
--- systemd-clean/src/nsresourced/userns-registry.c
+++ systemd-workdir/src/nsresourced/userns-registry.c
@@ -13,6 +13,8 @@
 #include "user-util.h"
 #include "userns-registry.h"
 
+#include <sys/file.h>
+
 int userns_registry_open_fd(void) {
         int fd;
 
diff -urN --no-dereference systemd-clean/src/portable/portable.c systemd-workdir/src/portable/portable.c
--- systemd-clean/src/portable/portable.c
+++ systemd-workdir/src/portable/portable.c
@@ -1,6 +1,7 @@
 /* SPDX-License-Identifier: LGPL-2.1-or-later */
 
 #include <linux/loop.h>
+#include <sys/file.h>
 
 #include "sd-messages.h"
 
diff -urN --no-dereference systemd-clean/src/shared/async.c systemd-workdir/src/shared/async.c
--- systemd-clean/src/shared/async.c
+++ systemd-workdir/src/shared/async.c
@@ -86,6 +86,9 @@
 }
 
 int asynchronous_close(int fd) {
+#if defined(__mlibc__)
+        safe_close(fd);
+#else
         unsigned v;
         pid_t pid;
         int r;
@@ -129,6 +132,7 @@
                         if (waitpid(pid, NULL, __WCLONE) >= 0 || errno != EINTR)
                                 break;
         }
+#endif
 
         return -EBADF; /* return an invalidated fd */
 }
diff -urN --no-dereference systemd-clean/src/shared/bpf-program.h systemd-workdir/src/shared/bpf-program.h
--- systemd-clean/src/shared/bpf-program.h
+++ systemd-workdir/src/shared/bpf-program.h
@@ -4,7 +4,7 @@
 #include <linux/bpf.h>
 #include <stdint.h>
 #include <stdio.h>
-#include <sys/syscall.h>
+// #include <sys/syscall.h>
 
 #include "fdset.h"
 #include "list.h"
diff -urN --no-dereference systemd-clean/src/shared/bus-util.c systemd-workdir/src/shared/bus-util.c
--- systemd-clean/src/shared/bus-util.c
+++ systemd-workdir/src/shared/bus-util.c
@@ -764,9 +764,9 @@
         if (!f)
                 return -ENOMEM;
 
-        r = RET_NERRNO(malloc_info(/* options= */ 0, f));
-        if (r < 0)
-                return r;
+        // r = RET_NERRNO(malloc_info(/* options= */ 0, f));
+        // if (r < 0)
+        //         return r;
 
         r = memstream_finalize(&m, &dump, &dump_size);
         if (r < 0)
diff -urN --no-dereference systemd-clean/src/shared/common-signal.c systemd-workdir/src/shared/common-signal.c
--- systemd-clean/src/shared/common-signal.c
+++ systemd-workdir/src/shared/common-signal.c
@@ -66,10 +66,10 @@
                         break;
                 }
 
-                if (malloc_info(0, f) < 0) {
-                        log_error_errno(errno, "Failed to invoke malloc_info(): %m");
-                        break;
-                }
+                // if (malloc_info(0, f) < 0) {
+                //         log_error_errno(errno, "Failed to invoke malloc_info(): %m");
+                //         break;
+                // }
 
                 (void) memstream_dump(LOG_INFO, &m);
                 break;
diff -urN --no-dereference systemd-clean/src/shared/dev-setup.c systemd-workdir/src/shared/dev-setup.c
--- systemd-clean/src/shared/dev-setup.c
+++ systemd-workdir/src/shared/dev-setup.c
@@ -3,6 +3,7 @@
 #include <errno.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <sys/file.h>
 
 #include "alloc-util.h"
 #include "dev-setup.h"
